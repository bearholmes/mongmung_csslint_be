(()=>{"use strict";var __webpack_require__={n:module=>{var getter=module&&module.__esModule?()=>module.default:()=>module;return __webpack_require__.d(getter,{a:getter}),getter},d:(exports,definition)=>{for(var key in definition)__webpack_require__.o(definition,key)&&!__webpack_require__.o(exports,key)&&Object.defineProperty(exports,key,{enumerable:!0,get:definition[key]})},o:(obj,prop)=>Object.prototype.hasOwnProperty.call(obj,prop)};const external_express_namespaceObject=require("express");var external_express_default=__webpack_require__.n(external_express_namespaceObject);const external_compression_namespaceObject=require("compression");var external_compression_default=__webpack_require__.n(external_compression_namespaceObject);const external_serve_favicon_namespaceObject=require("serve-favicon");var external_serve_favicon_default=__webpack_require__.n(external_serve_favicon_namespaceObject);const external_morgan_namespaceObject=require("morgan");var external_morgan_default=__webpack_require__.n(external_morgan_namespaceObject);const external_stylelint_namespaceObject=require("stylelint"),external_posthtml_namespaceObject=require("posthtml");var external_posthtml_default=__webpack_require__.n(external_posthtml_namespaceObject);const external_posthtml_attrs_sorter_namespaceObject=require("posthtml-attrs-sorter");var external_posthtml_attrs_sorter_default=__webpack_require__.n(external_posthtml_attrs_sorter_namespaceObject);const external_diff_namespaceObject=require("diff"),external_diff2html_namespaceObject=require("diff2html");class RetRes{constructor(res){this.res=res,this.res.set("Content-Type","application/json")}success(json){this.res.status(200).json(Object.assign(json,{success:!0,message:"ok"}))}fail(msg){this.res.status(500).json({success:!0,message:msg})}}const router=external_express_default().Router();router.get("/",((req,res)=>{res.set("Content-Type","text/plain"),res.send("Hello. welcome to Stylelint. production")})),router.post("/api/lint",(function(req,res,next){console.log("start");const ret=new RetRes(res),config=req.body.config||"";config||ret.fail("Could not parse stylelint config");const opts={code:req.body.code,config,syntax:req.body.syntax,fix:!0},htmlOrder=["rel","type","href","src","width","height","target","id","name","class","style","title","alt","placeholder","role","aria-.+","data-.+","$unknown$"],codeDiff=(OriginCode,lintCode)=>{let html="";const diffText=(0,external_diff_namespaceObject.createPatch)("",OriginCode,lintCode,"","");return diffText.length>88&&(console.log("pretty"),html=external_diff2html_namespaceObject.html(diffText,{inputFormat:"diff",showFiles:!1,matching:"lines",outputFormat:"side-by-side"})),html=html.replace('<span class="d2h-tag d2h-changed d2h-changed-tag">CHANGED</span></span>','<span class="d2h-tag d2h-changed d2h-changed-tag">비교</span></span>'),html};(0,external_stylelint_namespaceObject.lint)(opts).then((response=>{if(console.log("lint"),"html"===req.body.syntax)external_posthtml_default()().use(external_posthtml_attrs_sorter_default()(htmlOrder)).process(response.output,{lowerCaseTags:!0,lowerCaseAttributeNames:!0,closingSingleTag:"slash"}).then((result=>{console.log("diff",result.html.length);const diffHtml=codeDiff(opts.code,result.html);console.log("end"),ret.success({warnings:response.results[0].warnings,output:result.html,diff:diffHtml})}));else{console.log("diff",response.output.length);const diffHtml=codeDiff(opts.code,response.output);console.log("end"),ret.success({warnings:response.results[0].warnings,output:response.output,diff:diffHtml})}})).catch((err=>{console.log("err :::"+err),ret.fail("lint failed")}))}));const route=router,external_http_namespaceObject=require("http"),external_debug_namespaceObject=require("debug");var external_debug_default=__webpack_require__.n(external_debug_namespaceObject);let app=external_express_default()();app.use(((req,res,next)=>{res.header("Access-Control-Allow-Origin","*"),res.header("Access-Control-Allow-Methods","GET, HEAD, OPTIONS, POST, PUT"),res.header("Access-Control-Allow-Headers","X-Requested-With, Content-Type, Authorization"),res.header("Access-Control-Allow-Credentials","true"),"OPTIONS"===req.method?res.sendStatus(200):next()})),app.use(external_morgan_default()("common")),app.use(external_compression_default()()),app.use((0,external_express_namespaceObject.json)({limit:"10mb"})),app.use((0,external_express_namespaceObject.urlencoded)({extended:!1})),app.use("/",route);const debug=external_debug_default()("myapp:server");app.use(external_serve_favicon_default()("./static/favicon.ico"));const port=(val=>{const port=parseInt(val,10);return isNaN(port)?val:port>=0&&port})(process.env.PORT||"5002");app.set("port",port);let server=(0,external_http_namespaceObject.createServer)(app);server.listen(port,(()=>{console.log(`Express is running on port ${port} / production`),global.gc?(console.log("--expose-gc"),global.gc()):console.log("Garbage collection unavailable.  use --expose-gc when launching node to enable forced garbage collection.")})),server.on("error",(error=>{if("listen"!==error.syscall)throw error;const bind="string"==typeof port?"Pipe "+port:"Port "+port;switch(error.code){case"EACCES":console.error(bind+" requires elevated privileges"),process.exit(1);case"EADDRINUSE":console.error(bind+" is already in use"),process.exit(1);default:throw error}})),server.on("listening",(()=>{const addr=server.address(),bind="string"==typeof addr?"pipe "+addr:"port "+addr.port;debug("Listening on "+bind)}))})();